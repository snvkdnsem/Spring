package com.example.demo.ioc.step6;

import org.springframework.stereotype.Service;

/*
 * 축구에서 공격수, 수비수, 골키퍼로 나누듯이
 * 웹 프로그램을 컨트롤러, 서비스, 리파지토리로 나누어 관리합니다.
 * 이는 역할에 따라서 구분하면 관리성이 증대외기 때문입니다.
 * 클래스 빈 컨테이너에 등록할 때, 역할에 따라 @Component를 상속한
 * @Service 애노테이션을 대신 사용하는 이유가 됩니다.
 */
@Service("manager")
public class OrderManager {
	CarMaker maker;
	
//	public OderManager() {
//		
//	}
	
	public OrderManager(@Qualifier("kiaMaker") CarMaker maker) {
		super();
		this.maker = maker;
	}

	public void order() {
		
		System.out.println("OrderManager : order() called.");
		//HyundaiMaker maker = new HyundaiMaker();;
		
		Money money = new Money(2000);
		System.out.println("OrderManager : " + money.getAmount() + "원을 만든다.");
		
		Car car = maker.sell(money);
		System.out.println("OrderManager : 돈을주고" + car.getName() + "를 얻는다.");
	}
	
	public void setMaker(CarMaker maker) {
		this.maker = maker;
	}
}